package #(baseModelPackageName);
#if(extendsJBoltBaseModel??)
#if(baseModelPackageName != "cn.jbolt.core.model.base")
import #(mainPkg?? "cn.jbolt").core.model.base.JBoltBaseModel;
#end
#else
import com.jfinal.plugin.activerecord.Model;
import com.jfinal.plugin.activerecord.IBean;
#end
import cn.jbolt.core.gen.JBoltField;
#if(needJSONField)
import com.alibaba.fastjson.annotation.JSONField;
import com.alibaba.fastjson.serializer.ToStringSerializer;
#end

/**
 * #(changeToSingleLine(tableMeta.remarks??))
 * Generated by JBolt, do not modify this file.
 */
#if (generateChainSetter)
@SuppressWarnings("unchecked")
#else
@SuppressWarnings("serial")
#end
#if(extendsJBoltBaseModel)
public abstract class #(tableMeta.baseModelName)<M extends #(tableMeta.baseModelName)<M>> extends JBoltBaseModel<M>{
#else
public abstract class #(tableMeta.baseModelName)<M extends #(tableMeta.baseModelName)<M>> extends Model<M> implements IBean {
#end
    public static final String DATASOURCE_CONFIG_NAME = "#(dataSourceConfigName?? 'main')";
#if(genColConstant??)
#for(cm : tableMeta.columnMetas)
    /**#(cm.remarks??)*/
    public static final String #if(genColConstantToUpperCase??)#(cm.name.toUpperCase())#else #(cm.name)#end  = "#(cm.name)";
#end
#end
#set(gcs = generateChainSetter)
#for(cm : tableMeta.columnMetas)
	#if (cm.remarks)
	/**
	 * #(cm.remarks)
	 */
	 #end
	#set(argName = javaKeyword.contains(cm.attrName) ? '_' + cm.attrName : cm.attrName)
	public #(gcs? 'M' : 'void') set#(firstCharToUpperCase(cm.attrName??))(#(cm.javaType??) #(argName??)) {
		set("#(cm.name)", #(argName));
		#if (gcs)
		return (M)this;
		#end
	}

	#if (cm.remarks)
	/**
	 * #(changeToSingleLine(cm.remarks))
	 */
	 #end
	#set(getterOfModel = getterTypeMap.get(cm.javaType))
	#if (isBlank(getterOfModel))
		#set(getterOfModel = 'get')
	#end
	#if (cm.remarks)
	@JBoltField(name="#(cm.attrName.toLowerCase())" ,columnName="#(cm.name)",type="#(javaTypeMap.get(cm.javaType))", remark="#(changeToSingleLine(cm.remarks))", required=#(!(cm.isNullable!=null&&cm.isNullable=="YES")), maxLength=#columnTypeTo(cm.type,1), fixed=#columnTypeTo(cm.type,2), order=#(for.count))
	#else
	@JBoltField(name="#(cm.attrName.toLowerCase())" ,columnName="#(cm.name)",type="#(javaTypeMap.get(cm.javaType))", remark="#(cm.attrName.toUpperCase())", required=#(!(cm.isNullable!=null&&cm.isNullable=="YES")), maxLength=#columnTypeTo(cm.type,1), fixed=#columnTypeTo(cm.type,2), order=#(for.count))
	#end
	@JSONField(name = "#(cm.attrName.toLowerCase())"#if(javaTypeMap.get(cm.javaType)=="Long"), serializeUsing = ToStringSerializer.class#end)
	public #(cm.javaType) get#(firstCharToUpperCase(cm.attrName))() {
		return #(getterOfModel)("#(cm.name)");
	}

#end
}

